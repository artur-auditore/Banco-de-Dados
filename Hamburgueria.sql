--- TABELAS ---

CREATE TABLE CLIENTE
(COD_CLIENTE SERIAL PRIMARY KEY,
NOME VARCHAR(60) NOT NULL,
DT_NASC DATE,
ENDERECO VARCHAR(60),
TELEFONE VARCHAR(13));

CREATE TABLE CATEGORIA_CLIENTE
(COD_CAT SERIAL PRIMARY KEY,
DESCRICAO VARCHAR(60),
DESCONTO INT NOT NULL);

CREATE TABLE ENTREGA
(COD_ENTREGA SERIAL PRIMARY KEY,
ZONA VARCHAR(20),
VALOR FLOAT NOT NULL);

CREATE TABLE RESTAURANTE
(COD_REST SERIAL PRIMARY KEY,
RAZAO_SOCIAL VARCHAR(35),
CNPJ VARCHAR(13),
TELEFONE INT NOT NULL,
ENDERECO VARCHAR(40));

CREATE TABLE PRATO
(COD_PRATO SERIAL PRIMARY KEY,
NOME VARCHAR(30),
DESCRICAO VARCHAR(60));

CREATE TABLE FUNCIONARIO
(COD_FUNC SERIAL PRIMARY KEY,
NOME VARCHAR(60) NOT NULL,
CPF VARCHAR(20) NOT NULL,
DT_NASC DATE NOT NULL,
TELEFONE VARCHAR(13) NOT NULL);

DROP TABLE PEDIDO
(COD_PED SERIAL PRIMARY KEY,
COD_FUNC INT NOT NULL REFERENCES FUNCIONARIO(COD_FUNC),
COD_CLIENTE INT NOT NULL REFERENCES CLIENTE(COD_CLIENTE),
DESCRICAO VARCHAR(30),
DATA_PEDIDO DATE,
VALOR_TOTAL REAL,
ENTREGA INT NOT NULL REFERENCES ENTREGA(COD_ENTREGA));

DROP TABLE ITEM_PEDIDO
(COD_ITEM_PEDIDO SERIAL PRIMARY KEY,
COD_PED INT NOT NULL REFERENCES PEDIDO(COD_PED),
COD_REST INT NOT NULL REFERENCES RESTAURANTE(COD_REST),
PRECO REAL NOT NULL,
QUANTIDADE INT NOT NULL);

CREATE TABLE ESTOQUE
(COD_REST SERIAL REFERENCES RESTAURANTE(COD_REST),
COD_PRATO INT NOT NULL REFERENCES PRATO(COD_PRATO),
QUANTIDADE INT NOT NULL,
PRECO REAL NOT NULL,
CONSTRAINT P_KEY PRIMARY KEY(COD_REST, COD_PRATO));


--- Inserção (OK) ---
CREATE OR REPLACE FUNCTION INSERIR(NOME_TABELA TEXT, ATRIBUTOS TEXT)
RETURNS VOID AS $$
DECLARE
	QUERY TEXT:= 'INSERT INTO ' || NOME_TABELA || ' VALUES (' ||ATRIBUTOS|| ');';
BEGIN
	IF LOWER(NOME_TABELA)='pedido' THEN
		RAISE EXCEPTION 'Você não pode criar um pedido com esta função';
	ELSIF LOWER(NOME_TABELA)='item_pedido' THEN
		RAISE EXCEPTION 'Você não pode criar um pedido com esta função';
	END IF;
	EXECUTE QUERY;
END;

$$ LANGUAGE 'plpgsql';

--- Deletar (OK) ---
CREATE OR REPLACE FUNCTION DELETAR(TABELA TEXT, COLUNA TEXT, VALOR TEXT)
RETURNS VOID AS $$
DECLARE
	COMANDO TEXT := 'DELETE FROM ' || TABELA || ' WHERE ' || COLUNA || ' ilike ''' || VALOR ||''';';
BEGIN
	EXECUTE COMANDO;
END;
$$ LANGUAGE 'plpgsql';

---Teste---
SELECT DELETAR('CLIENTE', 'NOME', 'Diego');


--- Dupla inserção (restaurante) ---

--- Funcionario não pode estar em 2 restaurantes ---



----- Triggers -----
---Checa valores negativos---
CREATE OR REPLACE FUNCTION CHECK_NEGATIVO() RETURNS TRIGGER AS $$
BEGIN
IF (OP = 'INSERT') OR (OP = 'UPDATE') THEN
	IF NEW.VALOR < 0 THEN
		RAISE EXCEPTION 'O valor da entrega não pode ser menor que zero';
	ELSIF NEW.VALOR_TOTAL < 0 THEN
		RAISE EXCEPTION 'O valor total não pode ser menor que zero';
	ELSIF NEW.PRECO < 0 THEN
		RAISE EXCEPTION 'Preço não pode menor que zero';
	ELSIF NEW.QUANTIDADE < 0 THEN
		RAISE EXCEPTION 'Quantidade não pode ser menor que zero.';
	ELSE RETURN NEW;
	END IF;
END IF;
end;
$$language plpgsql

CREATE TRIGGER CHECK_NEGATIVO BEFORE INSERT OR UPDATE ON CATEGORIA_CLIENTE
FOR EACH ROW EXECUTE PROCEDURE CHECK_NEGATIVO();

--- Dupla inserção (cliente) (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_CLIENTE() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM CLIENTE WHERE NOME = NEW.NOME AND DT_NASC = NEW.DT_NASC AND TELEFONE = NEW.TELEFONE AND ENDERECO = NEW.ENDERECO) THEN
			RAISE EXCEPTION 'Este cliente já existe no banco de dados. Tente novamente';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_CLIENTE BEFORE INSERT OR UPDATE ON CLIENTE 
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_CLIENTE();

--- Dupla inserção (Funcionário) (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_FUNC() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM FUNCIONARIO WHERE NOME = NEW.NOME AND DT_NASC = NEW.DT_NASC AND CPF = NEW.CPF AND TELEFONE = NEW.TELEFONE) THEN
			RAISE EXCEPTION 'Este(a) funcionário(a) já está cadastrado(a) no banco. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_FUNC BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_FUNC();

--- Dupla Inserção (Categoria_cliente)(OK) ---
CREATE OR REPLACE FUNCTION DUPLICIDADE_CAT() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM CATEGORIA_CLIENTE WHERE DESCRICAO = NEW.DESCRICAO AND DESCONTO = NEW.DESCONTO) THEN
			RAISE EXCEPTION 'Categoria já existente, tente cadastrar uma nova.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_CAT BEFORE INSERT OR UPDATE ON CATEGORIA_CLIENTE
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_CAT();



---APAGAR AS TRIGGERS---
DROP TRIGGER IF EXISTS DUPLICIDADE_CAT ON CATEGORIA_CLIENTE;

--- testes ---
SELECT inserir('CLIENTE','DEFAULT,''Artur'',''1997-08-02'',''Zona sul'',''86-988146209''');
SELECT INSERIR('CLIENTE', 'default,''Diego'',''1995-07-09'',''Zona sudeste'',''86-98856120''');

SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Leticia'', ''009.784.987-08'', ''1997-09-24'', ''86-9710656610''');
SELECT INSERIR('CATEGORIA_CLIENTE', 'DEFAULT, ''PREMIUM'',''20''');

DELETE  from CATEGORIA_CLIENTE
SELECT * FROM FUNCIONARIO;
SELECT * FROM CATEGORIA_CLIENTE;
--- TABELAS ---

CREATE TABLE CLIENTE
(COD_CLIENTE SERIAL PRIMARY KEY,
NOME VARCHAR(60) NOT NULL,
DT_NASC DATE,
ENDERECO VARCHAR(60),
TELEFONE VARCHAR(13),
CATEGORIA INT NOT NULL REFERENCES CATEGORIA_CLIENTE(COD_CAT));

CREATE TABLE CATEGORIA_CLIENTE
(COD_CAT INT NOT NULL PRIMARY KEY,
DESCRICAO VARCHAR(60),
DESCONTO INT NOT NULL);

CREATE TABLE ENTREGA
(COD_ENTREGA SERIAL PRIMARY KEY,
ZONA VARCHAR(20),
VALOR FLOAT);

CREATE TABLE RESTAURANTE
(COD_REST SERIAL PRIMARY KEY,
RAZAO_SOCIAL VARCHAR(35),
CNPJ VARCHAR(15),
TELEFONE VARCHAR(13),
ENDERECO VARCHAR(40));

CREATE TABLE PRATO
(COD_PRATO SERIAL PRIMARY KEY,
NOME VARCHAR (30),
DESCRICAO VARCHAR(180),
PRECO FLOAT NOT NULL);

CREATE TABLE FUNCIONARIO
(COD_FUNC SERIAL PRIMARY KEY,
NOME VARCHAR(60) NOT NULL,
CPF VARCHAR(20) NOT NULL,
DT_NASC DATE NOT NULL,
TELEFONE VARCHAR(13) NOT NULL);

CREATE TABLE PEDIDO
(COD_PEDIDO SERIAL PRIMARY KEY,
COD_FUNC INT NOT NULL REFERENCES FUNCIONARIO(COD_FUNC),
COD_CLIENTE INT NOT NULL REFERENCES CLIENTE(COD_CLIENTE),
COD_REST INT NOT NULL REFERENCES RESTAURANTE(COD_REST),
STATUS VARCHAR(30),
DATA_PEDIDO DATE,
VALOR_TOTAL REAL,
ENTREGA INT NOT NULL REFERENCES ENTREGA(COD_ENTREGA));

CREATE TABLE ITEM_PEDIDO
(COD_ITEM_PEDIDO SERIAL PRIMARY KEY,
COD_PED INT NOT NULL REFERENCES PEDIDO(COD_PEDIDO),
COD_REST INT NOT NULL REFERENCES RESTAURANTE(COD_REST),
COD_PRATO INT NOT NULL REFERENCES PRATO(COD_PRATO),
PRECO REAL NOT NULL,
QUANTIDADE INT NOT NULL);

CREATE TABLE ESTOQUE
(COD_REST SERIAL REFERENCES RESTAURANTE(COD_REST),
COD_PRATO INT NOT NULL REFERENCES PRATO(COD_PRATO),
QUANTIDADE INT NOT NULL,
PRECO REAL NOT NULL,
CONSTRAINT P_KEY PRIMARY KEY(COD_REST, COD_PRATO));

CREATE TABLE FUNCIONARIO_RESTAURANTE
(COD_RESTAURANTE INT NOT NULL REFERENCES RESTAURANTE(COD_REST),
COD_FUNCIONARIO INT NOT NULL REFERENCES FUNCIONARIO(COD_FUNC),
CONSTRAINT FUNC_REST PRIMARY KEY(COD_FUNCIONARIO, COD_RESTAURANTE));


-------- Funções ---------
--- Inserção (OK) ---
CREATE OR REPLACE FUNCTION INSERIR(NOME_TABELA TEXT, ATRIBUTOS TEXT)
RETURNS VOID AS $$
DECLARE

	QUERY TEXT:= 'INSERT INTO ' || NOME_TABELA || ' VALUES (' ||ATRIBUTOS|| ');';
BEGIN

	IF LOWER(NOME_TABELA)='pedido' THEN
		RAISE EXCEPTION 'Você não pode criar um pedido com esta função';
	ELSIF LOWER(NOME_TABELA)='item_pedido' THEN
		RAISE EXCEPTION 'Você não pode criar um pedido com esta função';
	END IF;
	EXECUTE QUERY; 
	END;

$$ LANGUAGE 'plpgsql';

SELECT inserir('CLIENTE','DEFAULT,''Artur'',null,''Zona sul'',''86-988146209'', ''1''');


--- Deletar (OK) ---
CREATE OR REPLACE FUNCTION DELETAR(TABELA TEXT, COLUNA TEXT, VALOR TEXT)
RETURNS VOID AS $$
DECLARE
	COMANDO TEXT := 'DELETE FROM ' || TABELA || ' WHERE ' || COLUNA || ' ilike ''' || VALOR ||''';';
BEGIN
	EXECUTE COMANDO;
END;
$$ LANGUAGE 'plpgsql';

--- Atualizar (OK)---
CREATE OR REPLACE FUNCTION ATUALIZAR(TEXT, TEXT, TEXT, TEXT, TEXT) RETURNS VOID AS $$
DECLARE
	QUERY TEXT;
BEGIN
	QUERY := 'UPDATE ' || $1 || ' SET ' || $2 || ' = ''' || $3 || ''' WHERE ' || $4 || ' = ''' || %5 || ''' ;';
	EXECUTE QUERY;
	RAISE INFO 'Registros atualizados.';
END;
$$ LANGUAGE PLPGSQL;

--- Views ---
CREATE OR REPLACE VIEW REST_FUNC AS
SELECT COD_FUNCIONARIO FROM FUNCIONARIO_RESTAURANTE;
SELECT * FROM REST_FUNC;

--- Realizar Pedido ---
CREATE OR REPLACE FUNCTION REALIZAR_PEDIDO(COD_PED INT, PRATO_NOME TEXT, RESTAURANTE_NOME TEXT, QUANT INT, CLIENTE_NOME TEXT, ENTREGA INT) 
RETURNS VOID AS $$
DECLARE
	RESTAURANT INT;
	CLIENT INT;
	ENTREGA INT;
	PRATO INT;
	VALOR REAL;
BEGIN
	IF (NOT EXISTS(SELECT * FROM PRATO WHERE NOME = $2)) THEN
		RAISE EXCEPTION 'Prato % não existe!', $2;
	ELSIF (NOT EXISTS(SELECT * FROM RESTAURANTE WHERE NOME = $3)) THEN
		RAISE EXCEPTION 'Restaurante % não existe!', $3;
	ELSIF (NOT EXISTS(SELECT * FROM CLIENTE WHERE NOME = $5)) THEN
		RAISE EXCEPTION 'Cliente % não existe!', 5;
	END IF;

	SELECT COD_REST INTO RESTAURANT FROM RESTAURANTE WHERE NOME=$3;
	SELECT COD_CLIENTE INTO CLIENT FROM CLIENTE WHERE NOME=$5;
	SELECT COD_PRATO INTO PRATO FROM PRATO WHERE NOME=$2

	IF (RESTAURANT IS NOT NULL AND CLIENT IS NOT NULL AND PRATO IS NOT NULL) THEN
		IF (EXISTS(SELECT * FROM PEDIDO WHERE COD_PEDIDO=$1)) THEN
			
		
/*
	IF((SELECT COD_CLIENTE FROM CLIENTE WHERE EXISTS(SELECT COD_CLIENTE FROM CLIENTE  WHERE COD_CLIENTE = NEW_CLIENTE) AND COD_CLIENTE = NEW_CLIENTE) = NEW_CLIENTE) THEN
	ELSE
		RAISE EXCEPTION 'Cliente não existe!';
	
	IF((SELECT COD_FUNCIONARIO FROM FUNCIONARIO_RESTAURANTE WHERE EXISTS(SELECT COD_FUNCIONARIO FROM FUNCIONARIO_RESTAURANTE WHERE COD_FUNCIONARIO = NEW_FUNC) AND COD_FUNCIONARIO = NEW_FUNC) = NEW_FUNC) THEN
	ELSE
		RAISE EXCEPTION 'Funcionário não existe!';
	END IF;*/

	
END;
$$ LANGUAGE PLPGSQL;

SELECT REALIZAR_PEDIDO(8,6);


----- Triggers -----

--- Tratamento de valores nulos na tabela cliente---

CREATE OR REPLACE FUNCTION CHECK_NULO_CLIENTE() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT' AND) THEN
		IF (NEW.NOME IS NULL OR NEW.DT_NASC IS NULL OR NEW.TELEFONE IS NULL OR NEW.ENDERECO IS NULL) THEN
			RAISE EXCEPTION 'Há valores nulos. Tente novamente';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_NULO_CLIENTE BEFORE INSERT OR UPDATE ON CLIENTE
FOR EACH ROW EXECUTE PROCEDURE CHECK_NULO_CLIENTE();

DELETE TRIGGER IF EXISTS CHECK_NULO ON CLIENTE;

---- Tratamento de valores nulos para tabela entrega (OK)----

CREATE OR REPLACE FUNCTION CHECK_NULO_ENTREGA() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF (NEW.ZONA IS NULL OR NEW.VALOR IS NULL) THEN
			RAISE EXCEPTION 'Há valores nulos. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_NULO_ENTREGA BEFORE INSERT OR UPDATE ON ENTREGA
FOR EACH ROW EXECUTE PROCEDURE CHECK_NULO_ENTREGA();

--- TESTE ---
SELECT INSERIR('ENTREGA', 'DEFAULT, ''Local'', NULL');


---- Tratamento de valores nulos para tabela categoria_cliente (OK)----
CREATE OR REPLACE FUNCTION CHECK_NULO_CATEGORIA_CLIENTE() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF (NEW.DESCRICAO IS NULL OR NEW.DESCONTO IS NULL) THEN
			RAISE EXCEPTION 'Há valores nulos. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_NULO_CATEGORIA_CLIENTE BEFORE INSERT OR UPDATE ON CATEGORIA_CLIENTE
FOR EACH ROW EXECUTE PROCEDURE CHECK_NULO_CATEGORIA_CLIENTE();

SELECT INSERIR('CATEGORIA_CLIENTE', '''3'', NULL,''20''');

/*---- Tratamento de valores nulos para tabela restaurante (OK)----*/
CREATE OR REPLACE FUNCTION CHECK_NULO_RESTAURANTE() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF (NEW.RAZAO_SOCIAL IS NULL OR NEW.CNPJ IS NULL OR NEW.TELEFONE IS NULL OR NEW.ENDERECO IS NULL) THEN
			RAISE EXCEPTION 'Há valores nulos. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_NULO_RESTAURANTE BEFORE INSERT OR UPDATE ON RESTAURANTE
FOR EACH ROW EXECUTE PROCEDURE CHECK_NULO_RESTAURANTE();

--- Teste ----
SELECT INSERIR('RESTAURANTE', 'DEFAULT, ''AVALON ZONA SUL'', null, ''3219-8714'', ''PARQUE PIAUI''');


/*---- Tratamento de valores nulos para tabela funcionario (OK) ----*/
CREATE OR REPLACE FUNCTION CHECK_NULO_FUNCIONARIO() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF (NEW.NOME IS NULL OR NEW.CPF IS NULL OR NEW.TELEFONE IS NULL OR NEW.DT_NASC IS NULL) THEN
			RAISE EXCEPTION 'Há valores nulos. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_NULO_FUNCIONARIO BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW EXECUTE PROCEDURE CHECK_NULO_FUNCIONARIO();

SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Otávio'', NULL, ''1996-01-22'', ''86-457963148''');
drop trigger if exists CHECK_NULO_FUNC_REST on prato;


/*---- Tratamento de valores nulos para tabela prato (OK) ----*/
CREATE OR REPLACE FUNCTION CHECK_NULO_PRATO() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF (NEW.NOME IS NULL OR NEW.DESCRICAO IS NULL OR NEW.PRECO IS NULL) THEN
			RAISE EXCEPTION 'Há valores nulos. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_NULO_PRATO BEFORE INSERT OR UPDATE ON PRATO
FOR EACH ROW EXECUTE PROCEDURE CHECK_NULO_PRATO();

--- Teste ---
SELECT INSERIR('PRATO', 'DEFAULT, ''Petisco'', null, ''5''');

---- Tratamento de valores nulos para tabela funcionario_restaurante (Ok) ----
CREATE OR REPLACE FUNCTION CHECK_NULO_FUNC_REST() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF (NEW.COD_FUNCIONARIO IS NULL OR NEW.COD_RESTAURANTE IS NULL) THEN
			RAISE EXCEPTION 'Há valores nulos. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_NULO_FUNC_REST BEFORE INSERT OR UPDATE ON FUNCIONARIO_RESTAURANTE
FOR EACH ROW EXECUTE PROCEDURE CHECK_NULO_FUNC_REST();

--- TESTE ---
SELECT INSERIR('FUNCIONARIO_RESTAURANTE', '9,NULL'); --- ERRO

---Checa valores negativos (TEM ERRO)---
/*CREATE OR REPLACE FUNCTION CHECK_NEGATIVO() RETURNS TRIGGER AS $$
BEGIN
IF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') THEN
	IF NEW.VALOR < 0 THEN
		RAISE EXCEPTION 'O valor da entrega não pode ser menor que zero';
	ELSIF NEW.VALOR_TOTAL < 0 THEN
		RAISE EXCEPTION 'O valor total não pode ser menor que zero';
	ELSIF NEW.PRECO < 0 THEN
		RAISE EXCEPTION 'Preço não pode menor que zero';
	ELSIF NEW.QUANTIDADE < 0 THEN
		RAISE EXCEPTION 'Quantidade não pode ser menor que zero.';
	ELSE RETURN NEW;
	END IF;
END IF;
end;
$$language plpgsql

CREATE TRIGGER CHECK_NEGATIVO BEFORE INSERT OR UPDATE ON CATEGORIA_CLIENTE
FOR EACH ROW EXECUTE PROCEDURE CHECK_NEGATIVO();*/


--- TESTE




--- Dupla inserção (cliente) (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_CLIENTE() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM CLIENTE WHERE NOME = NEW.NOME AND DT_NASC = NEW.DT_NASC AND TELEFONE = NEW.TELEFONE AND ENDERECO = NEW.ENDERECO) THEN
			RAISE EXCEPTION 'Este cliente já existe no banco de dados. Tente novamente';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_CLIENTE BEFORE INSERT OR UPDATE ON CLIENTE 
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_CLIENTE();

--- Dupla inserção (Funcionário) (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_FUNC() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM FUNCIONARIO WHERE NOME = NEW.NOME AND DT_NASC = NEW.DT_NASC AND CPF = NEW.CPF AND TELEFONE = NEW.TELEFONE) THEN
			RAISE EXCEPTION 'Este(a) funcionário(a) já está cadastrado(a) no banco. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_FUNC BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_FUNC();

--- Dupla Inserção (Categoria_cliente)(OK) ---
CREATE OR REPLACE FUNCTION DUPLICIDADE_CAT() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM CATEGORIA_CLIENTE WHERE DESCRICAO = NEW.DESCRICAO AND DESCONTO = NEW.DESCONTO) THEN
			RAISE EXCEPTION 'Categoria já existente, tente cadastrar uma nova.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_CAT BEFORE INSERT OR UPDATE ON CATEGORIA_CLIENTE
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_CAT();

--- Dupla Inserção (Restaurante) (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_REST() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		IF EXISTS (SELECT * FROM RESTAURANTE WHERE RAZAO_SOCIAL = NEW.RAZAO_SOCIAL AND CNPJ = NEW.CNPJ AND TELEFONE = NEW.TELEFONE AND ENDERECO = NEW.ENDERECO) THEN
			RAISE EXCEPTION 'O restaurante já existe no banco de dados. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_REST BEFORE INSERT OR UPDATE ON RESTAURANTE
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_REST();

--- Duplicidade no cadastro de funcionarios em um restaurante (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_FUNCIONARIO_EM_RESTAURANTE() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM FUNCIONARIO_RESTAURANTE WHERE COD_FUNCIONARIO = NEW.COD_FUNCIONARIO AND COD_RESTAURANTE = NEW.COD_RESTAURANTE) THEN
			RAISE EXCEPTION 'Funcionário já está cadastrado neste restaurante.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER FUNCIONARIO_EM_REST BEFORE INSERT OR UPDATE ON FUNCIONARIO_RESTAURANTE
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_FUNCIONARIO_EM_RESTAURANTE();

--- Funcionário não pode estar em mais de um restaurante (OK)---
CREATE OR REPLACE FUNCTION ONIPRESENCA_FUNCIONARIO() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM FUNCIONARIO_RESTAURANTE WHERE COD_FUNCIONARIO = NEW.COD_FUNCIONARIO) THEN
			RAISE EXCEPTION 'Funcionário já está lotado em outro restaurante.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER ONIPRESENCA_FUNCIONARIO BEFORE INSERT OR UPDATE ON FUNCIONARIO_RESTAURANTE
FOR EACH ROW EXECUTE PROCEDURE ONIPRESENCA_FUNCIONARIO();

--- Duplicidade em entrega (OK)---
CREATE OR REPLACE FUNCTION DUP_ENTREGA() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM ENTREGA WHERE ZONA = NEW.ZONA AND VALOR = NEW.VALOR) THEN
			RAISE EXCEPTION 'Entrega já cadastrada.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUP_ENTREGA BEFORE INSERT OR UPDATE ON ENTREGA
FOR EACH ROW EXECUTE PROCEDURE DUP_ENTREGA();

--- Não pode inserir mais de um prato (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_PRATO() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM PRATO WHERE NOME = NEW.NOME AND DESCRICAO = NEW.DESCRICAO AND PRECO = NEW.PRECO) THEN
			RAISE EXCEPTION 'Prato já inserido.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_PRATO BEFORE INSERT OR UPDATE ON PRATO
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_PRATO();

---APAGAR AS TRIGGERS---
DROP TRIGGER IF EXISTS CHECK_NULO ON CLIENTE;

--- Inserts ---
---Clientes---
SELECT inserir('CLIENTE','DEFAULT,''Artur'',''1997-08-02'',''Zona sul'',''86-988146209'', ''1''');
SELECT INSERIR('CLIENTE', 'default,''Diego'',''1995-07-09'',''Zona sudeste'',''86-98856120'', ''2''');
SELECT INSERIR('CLIENTE', 'default,''Marta'',''1985-08-29'',''Zona leste'',''86-988987962'', ''1''');
SELECT INSERIR('CLIENTE', 'default,''Sara'',''2000-11-21'',''Zona sul'',''86-974256120'', ''1''');
SELECT INSERIR('CLIENTE', 'default,''Daniel'',''1991-12-01'',''Zona norte'',''86-98856120'', ''1''');

insert into cliente values (default,'Sara',null,'Zona sul','86-974256120', 1);
SELECT INSERIR('CLIENTE', 'default,''Sara'',NULL,''Zona sul'',''86-974256120'', ''1''');


--- Entrega (Por zona) ---
SELECT INSERIR('ENTREGA', 'DEFAULT, ''Local'', ''0''');
SELECT INSERIR('ENTREGA', 'DEFAULT, ''Zona Sudeste'', ''6''');
SELECT INSERIR('ENTREGA', 'DEFAULT, ''Zona Norte'', ''18''');
SELECT INSERIR('ENTREGA', 'DEFAULT, ''Zona Sul'', ''20''');
SELECT INSERIR('ENTREGA', 'DEFAULT, ''Zona Leste'', ''12''');

--- Funcionários ---
SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Leticia'', ''||NULL||'', ''1997-09-24'', ''86-9710656610''');
SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Bruno'', ''017.984.125-49'', ''1991-11-11'', ''86-970477127''');
SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Hector'', ''785.167.416-82'', ''1997-09-24'', ''86-974189860''');
SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Barry'', ''169.745.289-77'', ''1996-01-22'', ''86-457963148''');
SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Natasha'', ''136.157.674-98'', ''1998-09-17'', ''86-784193624''');

--- Categorias ---
SELECT INSERIR('CATEGORIA_CLIENTE', '''3'', ''TARGARYEN'',''20''');

--- Restaurantes ----
SELECT INSERIR('RESTAURANTE', 'DEFAULT, ''AVALON'', ''78912340001'', ''3219-8784'', ''LOURIVAL PARENTE''');
SELECT INSERIR('RESTAURANTE', 'DEFAULT, ''AVALON ZONA SUL'', ''78912874520'', ''3219-8714'', ''PARQUE PIAUI''');
SELECT INSERIR('RESTAURANTE', 'DEFAULT, ''AVALON ZONA LESTE'', ''78856203400'', ''3219-8787'', ''BAIRRO DOS NOIVOS''');

--- Pratos ---
SELECT INSERIR('PRATO', 'DEFAULT, ''Bjorn Ironside'', ''Hambúrguer* de 186g, queijo prato, cebola, duas
fatias de bacon, molho barbecue servidos no pão de leite'', ''20.0''');
SELECT INSERIR('PRATO', 'DEFAULT, ''Ragnar Lothbrok'', ''Dois hambúrgueres* de 186g, queijo prato, cebola no shoyu,
quatro fatias de bacon, molho barbecue, servidos no pão de leite'', ''26.0''');
SELECT INSERIR('PRATO', 'DEFAULT, ''The Hobbit'', ''Hambúrguer* de 186g, legítimo queijo cheddar, rodelas de tomate com molho
rosé da casa servidos no pão de leite.'', ''16.0''');
SELECT INSERIR('PRATO', 'DEFAULT, ''Honeydukes'', ''Hambúrguer* de 186g, enorme fatia de queijo coalho empanado, fatias de 
bacon com molho de pimenta vermelha da casa (agridoce) servidos no pão de leite.'', ''24.0''');
SELECT INSERIR('PRATO', 'DEFAULT, ''Drogon'', ''Hambúrguer* de 186g, legítimo queijo cheddar, farofa de doritos, com molho
chipotle da casa (apimentado) servidos no pão de leite.'', ''22.0''');
SELECT INSERIR('PRATO', 'DEFAULT, ''Harry Porco'', ''Hambúrguer* de 186g, porção de uvas passas, bacon em fatias com o molho
Cheddar&Bacon da casa servidos no pão de leite.'', ''18.0''');
SELECT INSERIR('PRATO', 'DEFAULT, ''Asterix'', ''Hambúrguer* de 50g, legítimo queijo cheddar, picles em conserva servidos no
pão de leite.'', ''12.0''');
SELECT INSERIR('PRATO', 'DEFAULT, ''Refrigerante'', ''Coca-Cola, Coca-Cola Zero, Fanta Laranja, Fanta Uva, Sprite e
Guaraná Antártica.'', ''5.0''');
SELECT INSERIR('PRATO', 'DEFAULT, ''Suco'', ''Umbu, Cajá, Acerola'', ''5''');
SELECT INSERIR('PRATO', 'DEFAULT, ''Batata Frita'', ''Macias e crocantes, batatas fritas com sal'', ''7''');
SELECT INSERIR('PRATO', 'DEFAULT, '' Batata Frita Cheddar e Bacon'', ''Batatas fritas acompanhados do molho Cheddar &Bacon da casa.'', ''12.0''');

--- Estoque ---
SELECT INSERIR('ESTOQUE', '4,1,20,22.0');

--- Funcionário em restaurante ---
SELECT INSERIR('FUNCIONARIO_RESTAURANTE', '4,6');
SELECT INSERIR('FUNCIONARIO_RESTAURANTE', '4,10');
SELECT INSERIR('FUNCIONARIO_RESTAURANTE', '9,10'); --- ERRO

--- Consultas simples ---
DELETE  from CLIENTE WHERE COD_CLIENTE = 41
SELECT * FROM FUNCIONARIO;
SELECT * FROM ENTREGA; 
SELECT * FROM CATEGORIA_CLIENTE;
SELECT * FROM RESTAURANTE;
SELECT * FROM CLIENTE;
SELECT * FROM FUNCIONARIO_RESTAURANTE;
SELECT * FROM PRATO;
SELECT * FROM ESTOQUE;
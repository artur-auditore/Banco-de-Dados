--- TABELAS ---

CREATE TABLE CLIENTE
(COD_CLIENTE INT NOT NULL PRIMARY KEY,
NOME VARCHAR(60) NOT NULL,
DT_NASC DATE,
ENDERECO VARCHAR(60),
TELEFONE INT);

CREATE TABLE CATEGORIA_CLIENTE
(COD_CAT INT NOT NULL PRIMARY KEY,
DESCRICAO VARCHAR(60),
DESCONTO INT NOT NULL);

CREATE TABLE ENTREGA
(COD_ENTREGA INT NOT NULL PRIMARY KEY,
ZONA VARCHAR(20),
VALOR FLOAT NOT NULL);

CREATE TABLE RESTAURANTE
(COD_REST INT NOT NULL PRIMARY KEY,
NOME VARCHAR(35),
CNPJ VARCHAR(13),
TELEFONE INT NOT NULL,
ENDERECO VARCHAR(40));

CREATE TABLE PRATO
(COD_PRATO INT NOT NULL PRIMARY KEY,
NOME VARCHAR(30),
DESCRICAO VARCHAR(60));

CREATE TABLE FUNCIONARIO
(COD_FUNC INT NOT NULL PRIMARY KEY,
NOME VARCHAR(60) NOT NULL,
CPF INT NOT NULL,
DT_NASC DATE,
TELEFONE INT);

CREATE TABLE PEDIDO
(COD_PED INT NOT NULL PRIMARY KEY,
COD_FUNC INT NOT NULL REFERENCES FUNCIONARIO(COD_FUNC),
COD_CLIENTE INT NOT NULL REFERENCES CLIENTE(COD_CLIENTE),
DESCRICAO VARCHAR(30),
DATA_PEDIDO DATE,
VALOR_TOTAL REAL,
ENTREGA INT NOT NULL REFERENCES ENTREGA(COD_ENTREGA));

CREATE TABLE ITEM_PEDIDO
(COD_ITEM_PEDIDO INT NOT NULL PRIMARY KEY,
COD_PED INT NOT NULL REFERENCES PEDIDO(COD_PED),
COD_REST INT NOT NULL REFERENCES RESTAURANTE(COD_REST),
PRECO REAL NOT NULL,
QUANTIDADE INT NOT NULL);

CREATE TABLE ESTOQUE
(COD_REST INT NOT NULL REFERENCES RESTAURANTE(COD_REST),
COD_PRATO INT NOT NULL REFERENCES PRATO(COD_PRATO),
QUANTIDADE INT NOT NULL,
PRECO REAL NOT NULL,
CONSTRAINT P_KEY PRIMARY KEY(COD_REST, COD_PRATO));



--- Inserção ---
CREATE OR REPLACE FUNCTION INSERIR(NOME_TABELA TEXT, ATRIBUTOS TEXT)
RETURNS VOID AS $$
DECLARE
	QUERY TEXT:= 'INSERT INTO' || NOME_TABELA || 'VALUES('||ATRIBUTOS||');';
BEGIN
	IF LOWER(NOME_TABELA)='pedido' THEN
		RAISE EXCEPTION 'Você não pode criar um pedido com esta função';
	ELSIF LOWER(NOME_TABELA)='item_pedido' THEN
		RAISE EXCEPTION 'Você não pode criar um pedido com esta função';
	END IF;
	EXECUTE QUERY;
END;

$$ LANGUAGE 'PLPGSQL';

--- Deletar ---
CREATE OR REPLACE FUNCTION DELETAR(TABELA TEXT, COLUNA TEXT, VALOR TEXT)
RETURNS VOID AS $$
DECLARE
QUERY TEXT;
BEGIN
QUERY:= 'DELETE FROM' || $1 || 'WHERE' || $2 || ' = ''' || $3 ||''');';
EXECUTE QUERY;
RAISE INFO 'Registros deletados com sucesso';
END;
$$ LANGUAGE 'plpgsql';

----- Triggers -----
---Checa valores negativos---
CREATE OR REPLACE FUNCTION CHECK_NEGATIVO() RETURNS TRIGGER AS $$
BEGIN
IF (OP = 'INSERT') OR (OP = 'UPDATE') THEN
	IF NEW.VALOR < 0 THEN
		RAISE EXCEPTION 'O valor da entrega não pode ser menor que zero';
	ELSIF NEW.VALOR_TOTAL < 0 THEN
		RAISE EXCEPTION 'O valor total não pode ser menor que zero';
	ELSIF NEW.PRECO < 0 THEN
		RAISE EXCEPTION 'Preço não pode menor que zero';
	ELSIF NEW.QUANTIDADE < 0 THEN
		RAISE EXCEPTION 'Quantidade não pode ser menor que zero.';
	ELSE RETURN NEW;
	END IF;
END IF;
end;
$$language plpgsql

CREATE TRIGGER CHECK_NEGATIVO BEFORE INSERT OR UPDATE ON CATEGORIA_CLIENTE
FOR EACH ROW EXECUTE PROCEDURE CHECK_NEGATIVO();
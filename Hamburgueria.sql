--- TABELAS ---

CREATE TABLE CLIENTE
(COD_CLIENTE SERIAL PRIMARY KEY,
NOME VARCHAR(60) NOT NULL,
DT_NASC DATE,
ENDERECO VARCHAR(60),
TELEFONE VARCHAR(13),
CATEGORIA INT NOT NULL REFERENCES CATEGORIA_CLIENTE(COD_CAT));

CREATE TABLE CATEGORIA_CLIENTE
(COD_CAT INT NOT NULL PRIMARY KEY,
DESCRICAO VARCHAR(60),
DESCONTO INT NOT NULL);

CREATE TABLE ENTREGA
(COD_ENTREGA SERIAL PRIMARY KEY,
ZONA VARCHAR(20),
VALOR FLOAT NOT NULL);

CREATE TABLE RESTAURANTE
(COD_REST SERIAL PRIMARY KEY,
RAZAO_SOCIAL VARCHAR(35),
CNPJ VARCHAR(15),
TELEFONE VARCHAR(13),
ENDERECO VARCHAR(40));


CREATE TABLE PRATO
(COD_PRATO SERIAL PRIMARY KEY,
NOME VARCHAR(30),
DESCRICAO VARCHAR(60));

CREATE TABLE FUNCIONARIO
(COD_FUNC SERIAL PRIMARY KEY,
NOME VARCHAR(60) NOT NULL,
CPF VARCHAR(20) NOT NULL,
DT_NASC DATE NOT NULL,
TELEFONE VARCHAR(13) NOT NULL);

DROP TABLE PEDIDO
(COD_PED SERIAL PRIMARY KEY,
COD_FUNC INT NOT NULL REFERENCES FUNCIONARIO(COD_FUNC),
COD_CLIENTE INT NOT NULL REFERENCES CLIENTE(COD_CLIENTE),
DESCRICAO VARCHAR(30),
DATA_PEDIDO DATE,
VALOR_TOTAL REAL,
ENTREGA INT NOT NULL REFERENCES ENTREGA(COD_ENTREGA));

DROP TABLE ITEM_PEDIDO
(COD_ITEM_PEDIDO SERIAL PRIMARY KEY,
COD_PED INT NOT NULL REFERENCES PEDIDO(COD_PED),
COD_REST INT NOT NULL REFERENCES RESTAURANTE(COD_REST),
PRECO REAL NOT NULL,
QUANTIDADE INT NOT NULL);

DROP TABLE ESTOQUE
(COD_REST SERIAL REFERENCES RESTAURANTE(COD_REST),
COD_PRATO INT NOT NULL REFERENCES PRATO(COD_PRATO),
QUANTIDADE INT NOT NULL,
PRECO REAL NOT NULL,
CONSTRAINT P_KEY PRIMARY KEY(COD_REST, COD_PRATO));

CREATE TABLE FUNCIONARIO_RESTAURANTE
(COD_RESTAURANTE INT NOT NULL REFERENCES RESTAURANTE(COD_REST),
COD_FUNCIONARIO INT NOT NULL REFERENCES FUNCIONARIO(COD_FUNC),
CONSTRAINT FUNC_REST PRIMARY KEY(COD_FUNCIONARIO, COD_RESTAURANTE));


-------- Funções ---------
--- Inserção (OK) ---
CREATE OR REPLACE FUNCTION INSERIR(NOME_TABELA TEXT, ATRIBUTOS TEXT)
RETURNS VOID AS $$
DECLARE
	QUERY TEXT:= 'INSERT INTO ' || NOME_TABELA || ' VALUES (' ||ATRIBUTOS|| ');';
BEGIN
	IF LOWER(NOME_TABELA)='pedido' THEN
		RAISE EXCEPTION 'Você não pode criar um pedido com esta função';
	ELSIF LOWER(NOME_TABELA)='item_pedido' THEN
		RAISE EXCEPTION 'Você não pode criar um pedido com esta função';
	END IF;
	EXECUTE QUERY;
END;

$$ LANGUAGE 'plpgsql';

--- Deletar (OK) ---
CREATE OR REPLACE FUNCTION DELETAR(TABELA TEXT, COLUNA TEXT, VALOR TEXT)
RETURNS VOID AS $$
DECLARE
	COMANDO TEXT := 'DELETE FROM ' || TABELA || ' WHERE ' || COLUNA || ' ilike ''' || VALOR ||''';';
BEGIN
	EXECUTE COMANDO;
END;
$$ LANGUAGE 'plpgsql';

--- Atualizar (OK)---
CREATE OR REPLACE FUNCTION ATUALIZAR(TEXT, TEXT, TEXT, TEXT, TEXT) RETURNS VOID AS $$
DECLARE
	QUERY TEXT;
BEGIN
	QUERY := 'UPDATE ' || $1 || ' SET ' || $2 || ' = ''' || $3 || ''' WHERE ' || $4 || ' = ''' || %5 || ''' ;';
	EXECUTE QUERY;
	RAISE INFO 'Registros atualizados.';
END;
$$ LANGUAGE PLPGSQL;

----- Triggers -----
---Checa valores negativos (TEM ERRO)---
CREATE OR REPLACE FUNCTION CHECK_NEGATIVO() RETURNS TRIGGER AS $$
BEGIN
IF (TG_OP = 'INSERT') OR (TG_OP = 'UPDATE') THEN
	IF NEW.VALOR < 0 THEN
		RAISE EXCEPTION 'O valor da entrega não pode ser menor que zero';
	ELSIF NEW.VALOR_TOTAL < 0 THEN
		RAISE EXCEPTION 'O valor total não pode ser menor que zero';
	ELSIF NEW.PRECO < 0 THEN
		RAISE EXCEPTION 'Preço não pode menor que zero';
	ELSIF NEW.QUANTIDADE < 0 THEN
		RAISE EXCEPTION 'Quantidade não pode ser menor que zero.';
	ELSE RETURN NEW;
	END IF;
END IF;
end;
$$language plpgsql

CREATE TRIGGER CHECK_NEGATIVO BEFORE INSERT OR UPDATE ON CATEGORIA_CLIENTE
FOR EACH ROW EXECUTE PROCEDURE CHECK_NEGATIVO();

--- Dupla inserção (cliente) (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_CLIENTE() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM CLIENTE WHERE NOME = NEW.NOME AND DT_NASC = NEW.DT_NASC AND TELEFONE = NEW.TELEFONE AND ENDERECO = NEW.ENDERECO) THEN
			RAISE EXCEPTION 'Este cliente já existe no banco de dados. Tente novamente';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_CLIENTE BEFORE INSERT OR UPDATE ON CLIENTE 
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_CLIENTE();

--- Dupla inserção (Funcionário) (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_FUNC() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM FUNCIONARIO WHERE NOME = NEW.NOME AND DT_NASC = NEW.DT_NASC AND CPF = NEW.CPF AND TELEFONE = NEW.TELEFONE) THEN
			RAISE EXCEPTION 'Este(a) funcionário(a) já está cadastrado(a) no banco. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_FUNC BEFORE INSERT OR UPDATE ON FUNCIONARIO
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_FUNC();

--- Dupla Inserção (Categoria_cliente)(OK) ---
CREATE OR REPLACE FUNCTION DUPLICIDADE_CAT() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM CATEGORIA_CLIENTE WHERE DESCRICAO = NEW.DESCRICAO AND DESCONTO = NEW.DESCONTO) THEN
			RAISE EXCEPTION 'Categoria já existente, tente cadastrar uma nova.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_CAT BEFORE INSERT OR UPDATE ON CATEGORIA_CLIENTE
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_CAT();

--- Dupla Inserção (Restaurante) (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_REST() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		IF EXISTS (SELECT * FROM RESTAURANTE WHERE RAZAO_SOCIAL = NEW.RAZAO_SOCIAL AND CNPJ = NEW.CNPJ AND TELEFONE = NEW.TELEFONE AND ENDERECO = NEW.ENDERECO) THEN
			RAISE EXCEPTION 'O restaurante já existe no banco de dados. Tente novamente.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER DUPLICIDADE_REST BEFORE INSERT OR UPDATE ON RESTAURANTE
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_REST();

--- Duplicidade no cadastro de funcionarios em um restaurante (OK)---
CREATE OR REPLACE FUNCTION DUPLICIDADE_FUNCIONARIO_EM_RESTAURANTE() RETURNS TRIGGER AS $$
BEGIN
	IF(TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM FUNCIONARIO_RESTAURANTE WHERE COD_FUNCIONARIO = NEW.COD_FUNCIONARIO AND COD_RESTAURANTE = NEW.COD_RESTAURANTE) THEN
			RAISE EXCEPTION 'Funcionário já está cadastrado neste restaurante.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER FUNCIONARIO_EM_REST BEFORE INSERT OR UPDATE ON FUNCIONARIO_RESTAURANTE
FOR EACH ROW EXECUTE PROCEDURE DUPLICIDADE_FUNCIONARIO_EM_RESTAURANTE();

--- Funcionário não pode estar em mais de um restaurante (OK)---
CREATE OR REPLACE FUNCTION ONIPRESENCA_FUNCIONARIO() RETURNS TRIGGER AS $$
BEGIN
	IF (TG_OP = 'INSERT') THEN
		IF EXISTS(SELECT * FROM FUNCIONARIO_RESTAURANTE WHERE COD_FUNCIONARIO = NEW.COD_FUNCIONARIO) THEN
			RAISE EXCEPTION 'Funcionário já está lotado em outro restaurante.';
		END IF;
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER ONIPRESENCA_FUNCIONARIO BEFORE INSERT OR UPDATE ON FUNCIONARIO_RESTAURANTE
FOR EACH ROW EXECUTE PROCEDURE ONIPRESENCA_FUNCIONARIO();

---APAGAR AS TRIGGERS---
DROP TRIGGER IF EXISTS CHECK_NEGATIVO ON CATEGORIA_CLIENTE;

--- Inserts ---
---Clientes---
SELECT inserir('CLIENTE','DEFAULT,''Artur'',''1997-08-02'',''Zona sul'',''86-988146209'', ''1''');
SELECT INSERIR('CLIENTE', 'default,''Diego'',''1995-07-09'',''Zona sudeste'',''86-98856120'', ''2''');
SELECT INSERIR('CLIENTE', 'default,''Marta'',''1985-08-29'',''Zona leste'',''86-988987962'', ''1''');
SELECT INSERIR('CLIENTE', 'default,''Sara'',''2000-11-21'',''Zona sul'',''86-974256120'', ''1''');
SELECT INSERIR('CLIENTE', 'default,''Daniel'',''1991-12-01'',''Zona norte'',''86-98856120'', ''1''');

--- Funcionários ---
SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Leticia'', ''009.784.987-08'', ''1997-09-24'', ''86-9710656610''');
SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Bruno'', ''017.984.125-49'', ''1991-11-11'', ''86-970477127''');
SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Hector'', ''785.167.416-82'', ''1997-09-24'', ''86-974189860''');
SELECT INSERIR('FUNCIONARIO', 'DEFAULT, ''Barry'', ''169.745.289-77'', ''1996-01-22'', ''86-457963148''');

--- Categorias ---
SELECT INSERIR('CATEGORIA_CLIENTE', '''3'', ''TARGARYEN'',''20''');

--- Restaurantes ----
SELECT INSERIR('RESTAURANTE', 'DEFAULT, ''AVALON'', ''78912340001'', ''3219-8784'', ''LOURIVAL PARENTE''');
SELECT INSERIR('RESTAURANTE', 'DEFAULT, ''AVALON ZONA SUL'', ''78912874520'', ''3219-8714'', ''PARQUE PIAUI''');
SELECT INSERIR('RESTAURANTE', 'DEFAULT, ''AVALON ZONA LESTE'', ''78856203400'', ''3219-8787'', ''BAIRRO DOS NOIVOS''');


--- Funcionário em restaurante ---
SELECT INSERIR('FUNCIONARIO_RESTAURANTE', '4,6');
SELECT INSERIR('FUNCIONARIO_RESTAURANTE', '4,10');
SELECT INSERIR('FUNCIONARIO_RESTAURANTE', '9,10'); --- ERRO
--- Consultas simples ---
DELETE  from CLIENTE;
SELECT * FROM FUNCIONARIO;
SELECT * FROM CATEGORIA_CLIENTE;
SELECT * FROM RESTAURANTE;
SELECT * FROM FUNCIONARIO_RESTAURANTE;
